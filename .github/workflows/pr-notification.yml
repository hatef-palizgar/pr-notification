name: PR Notifications

on:
  pull_request:
    types:
      [
        opened,
        synchronize,
        reopened,
        ready_for_review,
        review_requested,
        edited,
      ]

permissions:
  pull-requests: read
  actions: write # Required for downloading artifacts
  contents: read # Required for reading repository content

jobs:
  extract-pr-data:
    name: üîç Extract PR Data & Identify Teams
    runs-on: ubuntu-latest
    outputs:
      channel_list: ${{ steps.extract-services.outputs.channel_list }}
      pr_title: ${{ steps.extract-services.outputs.pr_title }}
      jira_ticket: ${{ steps.extract-services.outputs.jira_ticket }}
      is_new_pr: ${{ github.event.action == 'opened' }}
    env:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    steps:
      - name: Debug PR information
        run: |
          echo "PR Action: ${{ github.event.action }}"
          echo "Is New PR: ${{ github.event.action == 'opened' }}"
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "PR Title: ${{ github.event.pull_request.title }}"
          echo "PR Author: ${{ github.event.pull_request.user.login }}"
          echo "PR URL: ${{ github.event.pull_request.html_url }}"

      - name: Extract services from PR title
        id: extract-services
        run: |
          # Define service-to-team mapping with channel IDs
          declare -A service_team_mapping
          # Format: service_team_mapping["service-name"]="team-name"
          service_team_mapping["meal-break"]="followup-team"
          service_team_mapping["overtime-methods"]="followup-team"
          service_team_mapping["salaries"]="followup-team"
          service_team_mapping["tags"]="platform-team"
          service_team_mapping["time-punch"]="followup-team"

          # Define team to Slack channel ID mapping
          declare -A team_channel_mapping
          # Format: team_channel_mapping["team-name"]="slack-channel-id"
          team_channel_mapping["followup-team"]="C083HGVSETB"
          team_channel_mapping["platform-team"]="C082QDBEATZ"

          # Get PR title
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "Processing PR title: $PR_TITLE"

          # Initialize empty channel list as default
          echo "channel_list=[]" >> $GITHUB_OUTPUT
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "jira_ticket=" >> $GITHUB_OUTPUT

          # Extract content between parentheses
          if [[ $PR_TITLE =~ \((.*?)\) ]]; then
            CONTENT_IN_BRACKETS="${BASH_REMATCH[1]}"
            echo "Found content in brackets: $CONTENT_IN_BRACKETS"
            
            # Split by comma and process each item
            declare -A affected_teams
            declare -A affected_channels
            
            IFS=',' read -ra ITEMS <<< "$CONTENT_IN_BRACKETS"
            for item in "${ITEMS[@]}"; do
              # Trim whitespace
              item=$(echo "$item" | xargs)
              echo "Processing item: $item"
              
              # Convert to uppercase for comparison
              UPPER_ITEM=$(echo "$item" | tr '[:lower:]' '[:upper:]')
              
              # Skip if it's a Jira ticket (matches QRND-number format, case insensitive)
              if [[ ! $UPPER_ITEM =~ ^QRND-[0-9]+$ ]]; then
                # Look up team name from service name
                if [[ -n "${service_team_mapping[$item]}" ]]; then
                  team_name="${service_team_mapping[$item]}"
                  affected_teams["$team_name"]=1
                  # Look up Slack channel ID from team name
                  if [[ -n "${team_channel_mapping[$team_name]}" ]]; then
                    affected_channels["${team_channel_mapping[$team_name]}"]=1
                    echo "Added channel for team $team_name: ${team_channel_mapping[$team_name]}"
                  fi
                fi
              fi
            done

            # Extract Jira ticket if present (case insensitive)
            JIRA_TICKET=""
            for item in "${ITEMS[@]}"; do
              item=$(echo "$item" | xargs)
              UPPER_ITEM=$(echo "$item" | tr '[:lower:]' '[:upper:]')
              if [[ $UPPER_ITEM =~ ^QRND-[0-9]+$ ]]; then
                JIRA_TICKET=$item
                echo "Found Jira ticket: $JIRA_TICKET"
                echo "jira_ticket=$JIRA_TICKET" >> $GITHUB_OUTPUT
                break
              fi
            done
            
            # Create a list of channels for the matrix
            if [ ${#affected_channels[@]} -gt 0 ]; then
              CHANNELS_JSON="["
              first=true
              for channel in "${!affected_channels[@]}"; do
                if [ "$first" = true ]; then
                  first=false
                else
                  CHANNELS_JSON+=","
                fi
                CHANNELS_JSON+="\"$channel\""
              done
              CHANNELS_JSON+="]"
              echo "Final channel list: $CHANNELS_JSON"
              echo "channel_list=$CHANNELS_JSON" >> $GITHUB_OUTPUT
            fi
          fi

  send-notifications:
    name: üì¢ Send Slack Notifications
    needs: extract-pr-data
    if: ${{ needs.extract-pr-data.outputs.channel_list != '[]' }}
    runs-on: ubuntu-latest
    env:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    strategy:
      matrix:
        channel: ${{ fromJson(needs.extract-pr-data.outputs.channel_list) }}
    steps:
      - name: Debug workflow state
        run: |
          echo "Event action: ${{ github.event.action }}"
          echo "Is new PR (raw): ${{ github.event.action == 'opened' }}"
          echo "Is new PR (from output): ${{ needs.extract-pr-data.outputs.is_new_pr }}"
          echo "Channel: ${{ matrix.channel }}"

      - name: Download previous timestamp
        id: download-artifact
        if: needs.extract-pr-data.outputs.is_new_pr != 'true'
        uses: dawidd6/action-download-artifact@v2
        with:
          name: pr-${{ github.event.pull_request.number }}-timestamps
          path: ./artifacts/
          workflow: pr-notification.yml
          workflow_conclusion: success
          if_no_artifact_found: warn
          search_artifacts: true
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Send notification to ${{ matrix.channel }}
        id: slack-notification
        if: needs.extract-pr-data.outputs.is_new_pr == 'true' || failure() || cancelled()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            {
              "channel": "${{ matrix.channel }}",
              "text": "New PR Notification",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ needs.extract-pr-data.outputs.is_new_pr && 'üîç New Pull Request' || 'üîÑ Pull Request Update' }}",
                    "emoji": true
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "image",
                      "image_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                      "alt_text": "github"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*${{ needs.extract-pr-data.outputs.pr_title }}*"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*:1234: PR Number:*\n#${{ github.event.pull_request.number }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*:package: Repository:*\n${{ github.repository }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*:bust_in_silhouette: Author:*\n${{ github.event.pull_request.user.login }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "${{ needs.extract-pr-data.outputs.jira_ticket != '' && format('*:bookmark: Jira Ticket:*\n<https://quinyx.atlassian.net/browse/{0}|{0}>', needs.extract-pr-data.outputs.jira_ticket) || ' ' }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Pull Request",
                        "emoji": true
                      },
                      "url": "${{ github.event.pull_request.html_url }}",
                      "style": "primary"
                    }
                  ]
                }
              ]
            }

      - name: Store message timestamp
        if: needs.extract-pr-data.outputs.is_new_pr == 'true' || failure() || cancelled()
        run: |
          mkdir -p ./artifacts
          TIMESTAMP="${{ steps.slack-notification.outputs.ts }}"
          TS_FILE="./artifacts/pr_${{ github.event.pull_request.number }}_${{ matrix.channel }}_ts.txt"
          echo "Storing timestamp: $TIMESTAMP"
          echo "To file: $TS_FILE"
          echo "$TIMESTAMP" > "$TS_FILE"

      - name: Upload timestamp artifact
        if: needs.extract-pr-data.outputs.is_new_pr == 'true' || failure() || cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: pr-${{ github.event.pull_request.number }}-timestamps
          path: ./artifacts/pr_${{ github.event.pull_request.number }}_${{ matrix.channel }}_ts.txt
          retention-days: 90
          overwrite: true

      - name: Read timestamp
        id: read-timestamp
        if: needs.extract-pr-data.outputs.is_new_pr != 'true' && success()
        run: |
          echo "ts=$(cat ./artifacts/pr_${{ github.event.pull_request.number }}_${{ matrix.channel }}_ts.txt)" >> $GITHUB_OUTPUT

      - name: üîÑ Send update message
        if: needs.extract-pr-data.outputs.is_new_pr != 'true' && success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            {
              "channel": "${{ matrix.channel }}",
              "thread_ts": "${{ steps.read-timestamp.outputs.ts }}",
              "text": "PR Updated: ${{ github.event.action }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*PR Update:* ${{ github.event.action }}\n${{ github.event.pull_request.html_url }}"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

