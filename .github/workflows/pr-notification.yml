name: PR Notifications

on:
  pull_request:
    types:
      [
        opened,
        synchronize,
        reopened,
        ready_for_review,
        review_requested,
        edited,
      ]

jobs:
  notify-teams:
    runs-on: ubuntu-latest
    env:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    steps:
      - name: Extract services from PR title
        id: extract-services
        run: |
          # Define service-to-team mapping with channel IDs
          declare -A service_team_mapping
          # Format: service_team_mapping["service-name"]="channel-name"
          service_team_mapping["meal-break"]="followup-team"
          service_team_mapping["overtime-methods"]="followup-team"
          service_team_mapping["salaries"]="followup-team"
          service_team_mapping["tags"]="followup-team"
          service_team_mapping["time-punch"]="followup-team"
          # More teams and services will be added later

          # Get PR title
          PR_TITLE="${{ github.event.pull_request.title }}"

          # Extract content between parentheses
          if [[ $PR_TITLE =~ \((.*?)\) ]]; then
            CONTENT_IN_BRACKETS="${BASH_REMATCH[1]}"
            
            # Split by comma and process each item
            declare -A affected_teams
            
            IFS=',' read -ra ITEMS <<< "$CONTENT_IN_BRACKETS"
            for item in "${ITEMS[@]}"; do
              # Trim whitespace
              item=$(echo "$item" | xargs)
              
              # Convert to uppercase for comparison
              UPPER_ITEM=$(echo "$item" | tr '[:lower:]' '[:upper:]')
              
              # Skip if it's a Jira ticket (matches QRND-number format, case insensitive)
              if [[ ! $UPPER_ITEM =~ ^QRND-[0-9]+$ ]]; then
                # Look up team name from service name
                if [[ -n "${service_team_mapping[$item]}" ]]; then
                  affected_teams["${service_team_mapping[$item]}"]=1
                fi
              fi
            done

            # Extract Jira ticket if present (case insensitive)
            JIRA_TICKET=""
            for item in "${ITEMS[@]}"; do
              item=$(echo "$item" | xargs)
              UPPER_ITEM=$(echo "$item" | tr '[:lower:]' '[:upper:]')
              if [[ $UPPER_ITEM =~ ^QRND-[0-9]+$ ]]; then
                JIRA_TICKET=$item
                break
              fi
            done

            # Output each team on a separate line
            for channel in "${!affected_teams[@]}"; do
              echo "channel_$channel=$channel" >> $GITHUB_OUTPUT
            done

            # Set other outputs
            echo "jira_ticket=$JIRA_TICKET" >> $GITHUB_OUTPUT
            echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
            
            # Create a list of channels for the matrix
            CHANNELS_JSON="["
            first=true
            for channel in "${!affected_teams[@]}"; do
              if [ "$first" = true ]; then
                first=false
              else
                CHANNELS_JSON+=","
              fi
              CHANNELS_JSON+="\"$channel\""
            done
            CHANNELS_JSON+="]"
            echo "channel_list=$CHANNELS_JSON" >> $GITHUB_OUTPUT
          fi

  send-notifications:
    needs: notify-teams
    if: ${{ needs.notify-teams.outputs.channel_list != '[]' && needs.notify-teams.outputs.channel_list != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        channel: ${{ fromJson(needs.notify-teams.outputs.channel_list) }}
    steps:
      - name: Send notification to ${{ matrix.channel }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ matrix.channel }}
          payload: |
            {
              "text": "New PR Notification",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*PR:* ${{ needs.notify-teams.outputs.pr_title }}\n*Link:* ${{ github.event.pull_request.html_url }}\n*PR Number:* ${{ github.event.pull_request.number }}${{ needs.notify-teams.outputs.jira_ticket != '' && format('\n*Jira Ticket:* {0}', needs.notify-teams.outputs.jira_ticket) || '' }}"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

