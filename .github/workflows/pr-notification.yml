name: PR Service Change Notifications

on:
  pull_request:
    types:
      [
        opened,
        synchronize,
        reopened,
        ready_for_review,
        review_requested,
        edited,
      ]

jobs:
  notify-teams:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL_FOLLOWUP: ${{ secrets.SLACK_WEBHOOK_URL_FOLLOWUP }}
    steps:
      - name: Extract services from PR title
        id: extract-services
        run: |
          # Define service-to-team mapping
          declare -A service_team_mapping
          # Format: service_team_mapping["service-name"]="team-name"
          service_team_mapping["meal-break"]="FOLLOWUP"
          service_team_mapping["overtime-methods"]="FOLLOWUP"
          service_team_mapping["salaries"]="FOLLOWUP"
          service_team_mapping["tags"]="FOLLOWUP"
          service_team_mapping["time-punch"]="FOLLOWUP"
          # More teams and services will be added later

          # Get PR title
          PR_TITLE="${{ github.event.pull_request.title }}"

          # Extract content between parentheses
          if [[ $PR_TITLE =~ \((.*?)\) ]]; then
            CONTENT_IN_BRACKETS="${BASH_REMATCH[1]}"
            
            # Split by comma and process each item
            declare -A affected_teams
            
            IFS=',' read -ra ITEMS <<< "$CONTENT_IN_BRACKETS"
            for item in "${ITEMS[@]}"; do
              # Trim whitespace
              item=$(echo "$item" | xargs)
              
              # Convert to uppercase for comparison
              UPPER_ITEM=$(echo "$item" | tr '[:lower:]' '[:upper:]')
              
              # Skip if it's a Jira ticket (matches QRND-number format, case insensitive)
              if [[ ! $UPPER_ITEM =~ ^QRND-[0-9]+$ ]]; then
                # Look up team name from service name
                if [[ -n "${service_team_mapping[$item]}" ]]; then
                  affected_teams["${service_team_mapping[$item]}"]=1
                fi
              fi
            done

            # Extract Jira ticket if present (case insensitive)
            JIRA_TICKET=""
            for item in "${ITEMS[@]}"; do
              item=$(echo "$item" | xargs)
              UPPER_ITEM=$(echo "$item" | tr '[:lower:]' '[:upper:]')
              if [[ $UPPER_ITEM =~ ^QRND-[0-9]+$ ]]; then
                # Use the original case from the PR title
                JIRA_TICKET=$item
                break
              fi
            done

            # Prepare the notification payload
            PAYLOAD='{
              "pr_url": "${{ github.event.pull_request.html_url }}",
              "pr_number": "${{ github.event.pull_request.number }}",
              "pr_title": "'"$PR_TITLE"'"
            }'

            # Send notification to each affected team
            for team in "${!affected_teams[@]}"; do
              echo "Sending notification to team: ${team}"
              
              # Get the webhook URL from environment variables
              WEBHOOK_URL="SLACK_WEBHOOK_URL_${team}"
              if [[ -n "${!WEBHOOK_URL}" ]]; then
                curl -X POST -H 'Content-type: application/json' \
                  --data "$PAYLOAD" \
                  "${!WEBHOOK_URL}"
              else
                echo "Warning: No webhook URL found for team ${team}"
              fi
            done
          fi
