name: PR Notifications

on:
  pull_request:
    types:
      [
        opened,
        synchronize,
        reopened,
        ready_for_review,
        review_requested,
        edited,
      ]

jobs:
  extract-pr-data:
    name: üîç Extract PR Data & Identify Teams
    runs-on: ubuntu-latest
    outputs:
      channel_list: ${{ steps.extract-services.outputs.channel_list }}
      pr_title: ${{ steps.extract-services.outputs.pr_title }}
      jira_ticket: ${{ steps.extract-services.outputs.jira_ticket }}
      is_new_message: ${{ steps.check-message-type.outputs.is_new_message }}
      previous_services: ${{ steps.check-message-type.outputs.previous_services }}
      pr_description: ${{ steps.extract-services.outputs.pr_description }}
    env:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    steps:
      - name: Check if new message needed
        id: check-message-type
        run: |
          # Initialize outputs
          echo "is_new_message=false" >> $GITHUB_OUTPUT
          echo "previous_services=[]" >> $GITHUB_OUTPUT

          # Check if this is a new PR
          if [[ "${{ github.event.action }}" == "opened" ]]; then
            echo "is_new_message=true" >> $GITHUB_OUTPUT
          fi

          # For edited events, check if services changed
          if [[ "${{ github.event.action }}" == "edited" ]] && [[ "${{ github.event.changes.title }}" != "" ]]; then
            OLD_TITLE="${{ github.event.changes.title.from }}"
            if [[ $OLD_TITLE =~ \((.*?)\) ]]; then
              OLD_SERVICES="${BASH_REMATCH[1]}"
              echo "previous_services=[$OLD_SERVICES]" >> $GITHUB_OUTPUT
              echo "is_new_message=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Extract services from PR title
        id: extract-services
        run: |
          # Define service-to-team mapping with channel IDs
          declare -A service_team_mapping
          # Format: service_team_mapping["service-name"]="channel-name"
          service_team_mapping["meal-break"]="followup-team"
          service_team_mapping["overtime-methods"]="followup-team"
          service_team_mapping["salaries"]="followup-team"
          service_team_mapping["tags"]="platform-team"
          service_team_mapping["time-punch"]="followup-team"
          # More teams and services will be added later

          # Get PR title
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "Processing PR title: $PR_TITLE"

          # Initialize empty channel list as default
          echo "channel_list=[]" >> $GITHUB_OUTPUT
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "jira_ticket=" >> $GITHUB_OUTPUT
          echo "pr_description=${{ github.event.pull_request.body }}" >> $GITHUB_OUTPUT

          # Extract content between parentheses
          if [[ $PR_TITLE =~ \((.*?)\) ]]; then
            CONTENT_IN_BRACKETS="${BASH_REMATCH[1]}"
            echo "Found content in brackets: $CONTENT_IN_BRACKETS"
            
            # Split by comma and process each item
            declare -A affected_teams
            
            IFS=',' read -ra ITEMS <<< "$CONTENT_IN_BRACKETS"
            for item in "${ITEMS[@]}"; do
              # Trim whitespace
              item=$(echo "$item" | xargs)
              echo "Processing item: $item"
              
              # Convert to uppercase for comparison
              UPPER_ITEM=$(echo "$item" | tr '[:lower:]' '[:upper:]')
              
              # Skip if it's a Jira ticket (matches QRND-number format, case insensitive)
              if [[ ! $UPPER_ITEM =~ ^QRND-[0-9]+$ ]]; then
                # Look up team name from service name
                if [[ -n "${service_team_mapping[$item]}" ]]; then
                  affected_teams["${service_team_mapping[$item]}"]=1
                  echo "Added team for service $item: ${service_team_mapping[$item]}"
                fi
              fi
            done

            # Extract Jira ticket if present (case insensitive)
            JIRA_TICKET=""
            for item in "${ITEMS[@]}"; do
              item=$(echo "$item" | xargs)
              UPPER_ITEM=$(echo "$item" | tr '[:lower:]' '[:upper:]')
              if [[ $UPPER_ITEM =~ ^QRND-[0-9]+$ ]]; then
                JIRA_TICKET=$item
                echo "Found Jira ticket: $JIRA_TICKET"
                echo "jira_ticket=$JIRA_TICKET" >> $GITHUB_OUTPUT
                break
              fi
            done
            
            # Create a list of channels for the matrix
            if [ ${#affected_teams[@]} -gt 0 ]; then
              CHANNELS_JSON="["
              first=true
              for channel in "${!affected_teams[@]}"; do
                if [ "$first" = true ]; then
                  first=false
                else
                  CHANNELS_JSON+=","
                fi
                CHANNELS_JSON+="\"$channel\""
              done
              CHANNELS_JSON+="]"
              echo "Final channel list: $CHANNELS_JSON"
              echo "channel_list=$CHANNELS_JSON" >> $GITHUB_OUTPUT
            fi
          fi

  send-notifications:
    name: üì¢ Send Slack Notifications
    needs: extract-pr-data
    if: ${{ needs.extract-pr-data.outputs.channel_list != '[]' }}
    runs-on: ubuntu-latest
    env:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    strategy:
      matrix:
        channel: ${{ fromJson(needs.extract-pr-data.outputs.channel_list) }}
    steps:
      - name: Send new message or thread reply
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ matrix.channel }}
          payload: |
            {
              "text": "New PR Notification",
              ${{ needs.extract-pr-data.outputs.is_new_message == 'true' && '' || format('thread_ts: "{0}",', github.event.pull_request.head.ref) }}
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ needs.extract-pr-data.outputs.is_new_message == 'true' && 'üîç New Pull Request' || 'üîÑ Pull Request Updated' }}",
                    "emoji": true
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*${{ needs.extract-pr-data.outputs.pr_title }}*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*:1234: PR Number:*\n#${{ github.event.pull_request.number }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*:package: Repository:*\n${{ github.repository }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*:bust_in_silhouette: Author:*\n<https://github.com/${{ github.event.pull_request.user.login }}|${{ github.event.pull_request.user.login }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "${{ needs.extract-pr-data.outputs.jira_ticket != '' && format('*:bookmark: Jira Ticket:*\n<https://quinyx.atlassian.net/browse/{0}|{0}>', needs.extract-pr-data.outputs.jira_ticket) || ' ' }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*:memo: Description:*\n${{ needs.extract-pr-data.outputs.pr_description || '_No description provided_' }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Pull Request",
                        "emoji": true
                      },
                      "url": "${{ github.event.pull_request.html_url }}",
                      "style": "primary"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

