name: PR Notifications

on:
  pull_request:
    types:
      [
        opened,
        synchronize,
        reopened,
        ready_for_review,
        review_requested,
        edited,
      ]

jobs:
  extract-pr-data:
    name: üîç Extract PR Data & Identify Teams
    runs-on: ubuntu-latest
    outputs:
      channel_list: ${{ steps.extract-services.outputs.channel_list }}
      pr_title: ${{ steps.extract-services.outputs.pr_title }}
      jira_ticket: ${{ steps.extract-services.outputs.jira_ticket }}
      is_new_pr: ${{ github.event.action == 'opened' }}
    env:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    steps:
      - name: Debug PR information
        run: |
          echo "PR Action: ${{ github.event.action }}"
          echo "Is New PR: ${{ github.event.action == 'opened' }}"
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "PR Title: ${{ github.event.pull_request.title }}"
          echo "PR Author: ${{ github.event.pull_request.user.login }}"
          echo "PR URL: ${{ github.event.pull_request.html_url }}"

      - name: Extract services from PR title
        id: extract-services
        run: |
          # Define service-to-team mapping with channel IDs
          declare -A service_team_mapping
          # Format: service_team_mapping["service-name"]="channel-name"
          service_team_mapping["meal-break"]="followup-team"
          service_team_mapping["overtime-methods"]="followup-team"
          service_team_mapping["salaries"]="followup-team"
          service_team_mapping["tags"]="platform-team"
          service_team_mapping["time-punch"]="followup-team"
          # More teams and services will be added later

          # Get PR title
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "Processing PR title: $PR_TITLE"

          # Initialize empty channel list as default
          echo "channel_list=[]" >> $GITHUB_OUTPUT
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "jira_ticket=" >> $GITHUB_OUTPUT

          # Extract content between parentheses
          if [[ $PR_TITLE =~ \((.*?)\) ]]; then
            CONTENT_IN_BRACKETS="${BASH_REMATCH[1]}"
            echo "Found content in brackets: $CONTENT_IN_BRACKETS"
            
            # Split by comma and process each item
            declare -A affected_teams
            
            IFS=',' read -ra ITEMS <<< "$CONTENT_IN_BRACKETS"
            for item in "${ITEMS[@]}"; do
              # Trim whitespace
              item=$(echo "$item" | xargs)
              echo "Processing item: $item"
              
              # Convert to uppercase for comparison
              UPPER_ITEM=$(echo "$item" | tr '[:lower:]' '[:upper:]')
              
              # Skip if it's a Jira ticket (matches QRND-number format, case insensitive)
              if [[ ! $UPPER_ITEM =~ ^QRND-[0-9]+$ ]]; then
                # Look up team name from service name
                if [[ -n "${service_team_mapping[$item]}" ]]; then
                  affected_teams["${service_team_mapping[$item]}"]=1
                  echo "Added team for service $item: ${service_team_mapping[$item]}"
                fi
              fi
            done

            # Extract Jira ticket if present (case insensitive)
            JIRA_TICKET=""
            for item in "${ITEMS[@]}"; do
              item=$(echo "$item" | xargs)
              UPPER_ITEM=$(echo "$item" | tr '[:lower:]' '[:upper:]')
              if [[ $UPPER_ITEM =~ ^QRND-[0-9]+$ ]]; then
                JIRA_TICKET=$item
                echo "Found Jira ticket: $JIRA_TICKET"
                echo "jira_ticket=$JIRA_TICKET" >> $GITHUB_OUTPUT
                break
              fi
            done
            
            # Create a list of channels for the matrix
            if [ ${#affected_teams[@]} -gt 0 ]; then
              CHANNELS_JSON="["
              first=true
              for channel in "${!affected_teams[@]}"; do
                if [ "$first" = true ]; then
                  first=false
                else
                  CHANNELS_JSON+=","
                fi
                CHANNELS_JSON+="\"$channel\""
              done
              CHANNELS_JSON+="]"
              echo "Final channel list: $CHANNELS_JSON"
              echo "channel_list=$CHANNELS_JSON" >> $GITHUB_OUTPUT
            fi
          fi

  send-notifications:
    name: üì¢ Send Slack Notifications
    needs: extract-pr-data
    if: ${{ needs.extract-pr-data.outputs.channel_list != '[]' }}
    runs-on: ubuntu-latest
    env:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    strategy:
      matrix:
        channel: ${{ fromJson(needs.extract-pr-data.outputs.channel_list) }}
    steps:
      - name: Debug workflow state
        run: |
          echo "Event action: ${{ github.event.action }}"
          echo "Is new PR (raw): ${{ github.event.action == 'opened' }}"
          echo "Is new PR (from output): ${{ needs.extract-pr-data.outputs.is_new_pr }}"
          echo "Channel: ${{ matrix.channel }}"

      - name: Send notification to ${{ matrix.channel }}
        id: slack-notification
        if: needs.extract-pr-data.outputs.is_new_pr == 'true'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ matrix.channel }}
          payload: |
            {
              "text": "New PR Notification",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ needs.extract-pr-data.outputs.is_new_pr && 'üîç New Pull Request' || 'üîÑ Pull Request Update' }}",
                    "emoji": true
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "image",
                      "image_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                      "alt_text": "github"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*${{ needs.extract-pr-data.outputs.pr_title }}*"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*:1234: PR Number:*\n#${{ github.event.pull_request.number }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*:package: Repository:*\n${{ github.repository }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*:bust_in_silhouette: Author:*\n${{ github.event.pull_request.user.login }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "${{ needs.extract-pr-data.outputs.jira_ticket != '' && format('*:bookmark: Jira Ticket:*\n<https://quinyx.atlassian.net/browse/{0}|{0}>', needs.extract-pr-data.outputs.jira_ticket) || ' ' }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Pull Request",
                        "emoji": true
                      },
                      "url": "${{ github.event.pull_request.html_url }}",
                      "style": "primary"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Store message timestamp
        if: needs.extract-pr-data.outputs.is_new_pr == 'true'
        run: |
          mkdir -p ./artifacts
          TIMESTAMP="${{ steps.slack-notification.outputs.ts }}"
          TS_FILE="./artifacts/pr_${{ github.event.pull_request.number }}_${{ matrix.channel }}_ts.txt"
          echo "Storing timestamp: $TIMESTAMP"
          echo "To file: $TS_FILE"
          echo "$TIMESTAMP" > "$TS_FILE"
          echo "Stored timestamp file contents:"
          cat "$TS_FILE"
          echo "Directory contents:"
          ls -la ./artifacts/

      - name: Upload timestamp artifact
        if: needs.extract-pr-data.outputs.is_new_pr == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: pr-${{ github.event.pull_request.number }}-timestamps
          path: ./artifacts/
          retention-days: 90

      - name: Download previous timestamp
        if: needs.extract-pr-data.outputs.is_new_pr != 'true'
        uses: actions/download-artifact@v4
        with:
          name: pr-${{ github.event.pull_request.number }}-timestamps
          path: ./artifacts/
        continue-on-error: true

      - name: Debug artifact contents
        if: needs.extract-pr-data.outputs.is_new_pr != 'true'
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing artifacts directory:"
          ls -la ./artifacts/
          echo "Looking for timestamp file:"
          find ./artifacts -type f -name "pr_${{ github.event.pull_request.number }}_*_ts.txt"

      - name: Get original message timestamp
        id: get-timestamp
        if: needs.extract-pr-data.outputs.is_new_pr != 'true'
        run: |
          TS_FILE="./artifacts/pr_${{ github.event.pull_request.number }}_${{ matrix.channel }}_ts.txt"
          echo "Looking for timestamp file: $TS_FILE"
          if [ -f "$TS_FILE" ]; then
            echo "Found timestamp file"
            echo "File contents:"
            cat "$TS_FILE"
            echo "Setting timestamp:"
            echo "ts=$(cat $TS_FILE)" >> $GITHUB_OUTPUT
            echo "Found timestamp: $(cat $TS_FILE)"
          else
            echo "File not found: $TS_FILE"
            echo "Directory contents:"
            ls -la ./artifacts/
            echo "No timestamp found for PR #${{ github.event.pull_request.number }} in channel ${{ matrix.channel }}"
            exit 1
          fi

      - name: üîÑ Send update message
        if: needs.extract-pr-data.outputs.is_new_pr != 'true'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ matrix.channel }}
          update-ts: ${{ steps.get-timestamp.outputs.ts }}
          payload: |
            {
              "text": "PR Updated: ${{ github.event.action }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*PR Update:* ${{ github.event.action }}\n${{ github.event.pull_request.html_url }}"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

